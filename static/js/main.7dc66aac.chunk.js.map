{"version":3,"sources":["pages/Home/home.module.scss","layout/app.module.scss","pages/Detail/detail.module.scss","services/env.js","services/services.js","contextApi/context.js","pages/Home/home.jsx","pages/Detail/detail.jsx","layout/app.jsx","serviceWorker.js","index.js"],"names":["module","exports","home","title","loading","card","cardContent","movieTitle","movieMeta","rating","movieOverview","cardActions","price","media","pagination","currentPageText","pageNumber","rootApp","navbar","navbarTitle","balance","balanceAmount","rootPages","detail","backdropImage","mainArea","cardDetail","movieTagline","movieRating","ratingValue","movieGenre","movieLanguage","movieRelease","movieRecommendation","noRecommendation","recommendationTitle","recommendationContainer","movieSimilar","noSimilar","similarTitle","similarContainer","BASE_URL_IMAGE","API","axios","create","baseURL","params","api_key","language","React","createContext","Provider","Consumer","contextWrapper","WrappedComponent","props","react_default","a","createElement","value","Object","assign","state","movies","genres","showLoading","currentPage","totalPages","contextApiState","_this","contextApiActions","actions","getMovies","_callee","pageFromUrl","response","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_loop","_iterator","_step","regenerator_default","wrap","_context","prev","next","setState","qs","parse","location","search","page","get","sort_by","region","sent","undefined","result","movie","objectSpread","owned","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","genre_id","match","find","genre","id","push","name","_iterator2","genre_ids","Symbol","iterator","done","err","return","join","vote_average","moviesOwned","movieId","data","results","t0","finish","total_pages","t1","console","log","stop","this","getGenres","_callee2","_context2","onNextPage","_callee3","_context3","Number","history","concat","onPrevPage","_callee4","_context4","onBuy","_callee5","currentBalance","moviesClone","updateIndex","_context5","updateSnackbar","open","message","duration","abrupt","updateBalance","toConsumableArray","updateMoviesOwned","findIndex","movieObj","goToDetailPage","_callee6","_context6","kebabCase","_this2","moviesCards","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop3","Grid_default","item","xs","key","Card_default","className","Classes","CardActionArea_default","onClick","CardMedia_default","image","poster_path","CardContent_default","overview","CardActions_default","accounting","formatMoney","Button_default","color","disabled","variant","_iterator3","CircularProgress_default","container","spacing","Component","slug","recommendations","similar","setInitialState","path","pathname","substring","split","takeRight","length","getMovieDetail","genreText","map","spoken_languages","getMovieRecommendation","getMovieSimilar","showMovieDetail","movieClone","_this$state","detailView","Fragment","recommendationView","similarView","isEmpty","recommendation","sim","src","backdrop_path","alt","tagline","format","release_date","App","snackbar","newBalance","_ref","movieIds","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","AppBar_default","position","Toolbar_default","Switch","Route","exact","component","Home","Detail","Boolean","window","hostname","app","BrowserRouter","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,KAAA,mBAAAC,MAAA,oBAAAC,QAAA,sBAAAC,KAAA,mBAAAC,YAAA,0BAAAC,WAAA,yBAAAC,UAAA,wBAAAC,OAAA,qBAAAC,cAAA,4BAAAC,YAAA,0BAAAC,MAAA,oBAAAC,MAAA,oBAAAC,WAAA,yBAAAC,gBAAA,8BAAAC,WAAA,0GCAlBhB,EAAAC,QAAA,CAAkBgB,QAAA,qBAAAC,OAAA,oBAAAC,YAAA,yBAAAC,QAAA,qBAAAC,cAAA,2BAAAC,UAAA,2CCAlBtB,EAAAC,QAAA,CAAkBsB,OAAA,uBAAAnB,QAAA,wBAAAoB,cAAA,8BAAAC,SAAA,yBAAApB,KAAA,qBAAAQ,MAAA,sBAAAa,WAAA,2BAAApB,YAAA,4BAAAC,WAAA,2BAAAoB,aAAA,6BAAAC,YAAA,4BAAAC,YAAA,4BAAAC,WAAA,2BAAAC,cAAA,8BAAAC,aAAA,6BAAAtB,cAAA,8BAAAC,YAAA,4BAAAC,MAAA,sBAAAqB,oBAAA,oCAAAC,iBAAA,iCAAAC,oBAAA,oCAAAC,wBAAA,wCAAAC,aAAA,6BAAAC,UAAA,0BAAAC,aAAA,6BAAAC,iBAAA,ygBCMLC,GAAiB,gDCIfC,WARHC,EAAMC,OAAO,CACvBC,QDHsB,gCCItBC,OAAQ,CACNC,QDFmB,mCCGnBC,SAAU,cCLwBC,IAAMC,cAAc,IAA3CC,eAAUC,eAEZC,GAAiB,SAAAC,GAC5B,OAAO,SAAAC,GACL,OACEC,EAAAC,EAAAC,cAACN,GAAD,KAAW,SAAAO,GAAK,OAAIH,EAAAC,EAAAC,cAACJ,EAADM,OAAAC,OAAA,GAAsBN,EAAWI,QCkS5CN,iNAnRbS,MAAQ,CACNC,OAAQ,GACRC,OAAQ,GACRC,aAAa,EACbC,YAAa,EACbC,WAAY,KAIdC,gBAAkBC,EAAKd,MAAMO,QAC7BQ,kBAAoBD,EAAKd,MAAMgB,UAO/BC,+BAAY,SAAAC,IAAA,IAAAC,EAAAC,EAAAZ,EAAAa,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEFjB,EAAKkB,SAAS,CAClBxB,OAAQ,GACRE,aAAa,IAJP,YAQFS,EAAcc,IAAGC,MAAMpB,EAAKd,MAAMmC,SAASC,QAAQC,MARjD,CAAAR,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAUAjB,EAAKkB,SAAS,CAClBrB,YAAaQ,IAXT,OAAAU,EAAAE,KAAA,uBAAAF,EAAAE,KAAA,GAcAjB,EAAKkB,SAAS,CAClBrB,YAAa,IAfT,eAAAkB,EAAAE,KAAA,GAmBe5C,GAAImD,IAAI,qBAAsB,CACnD/C,OAAQ,CACN8C,KAAMvB,EAAKP,MAAMI,YACjB4B,QAAS,oBACTC,OAAQ,QAvBJ,QAoCR,IAjBMpB,EAnBES,EAAAY,KAmCFjC,EAAS,GAnCPa,GAAA,EAAAC,GAAA,EAAAC,OAAAmB,EAAAb,EAAAC,KAAA,GAAAN,EAAA,eAoCGmB,EApCHjB,EAAAtB,MAqCAwC,EAAKvC,OAAAwC,EAAA,EAAAxC,CAAA,GACNsC,EADM,CAETG,OAAO,IAIHrC,EAAS,GA3CTsC,GAAA,EAAAC,GAAA,EAAAC,OAAAP,EAAA,IA4CN,IA5CM,IA4CNQ,EA5CMC,EAAA,eA4CKC,EA5CLF,EAAA9C,MA6CEiD,EAAQvC,EAAKP,MAAME,OAAO6C,KAAK,SAAAC,GAAK,OAAIA,EAAMC,KAAOJ,IAC3D3C,EAAOgD,KAAKJ,EAAMK,OAFpBC,EAAuBhB,EAAOiB,UAA9BC,OAAAC,cAAAf,GAAAG,EAAAS,EAAA5B,QAAAgC,MAAAhB,GAAA,EAAyCI,IA5CnC,MAAAa,GAAAhB,GAAA,EAAAC,EAAAe,EAAA,YAAAjB,GAAA,MAAAY,EAAAM,QAAAN,EAAAM,SAAA,WAAAjB,EAAA,MAAAC,GAgDNL,EAAMnC,OAASA,EAAOyD,KAAK,MAG3B,IAAI7G,EAAQ,EACNH,EAASyF,EAAOwB,aAClBjH,GAAU,EACZG,EAAQ,KACCH,GAAU,EACnBG,EAAQ,KACCH,GAAU,EACnBG,EAAQ,MACCH,GAAU,KACnBG,EAAQ,OAEVuF,EAAMvF,MAAQA,EAGduF,EAAME,WAIEJ,IAHNY,IACExC,EAAKD,gBAAgBuD,YACrB,SAAAC,GAAO,OAAIA,IAAY1B,EAAOa,KAGlChD,EAAOiD,KAAKb,IAnCdnB,EAAqBL,EAASkD,KAAKC,QAAnCV,OAAAC,cAAAzC,GAAAK,EAAAD,EAAAM,QAAAgC,MAAA1C,GAAA,EAA4CG,IApCpCK,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA2C,GAAA3C,EAAA,UAAAP,GAAA,EAAAC,EAAAM,EAAA2C,GAAA,QAAA3C,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GAAAT,GAAA,MAAAI,EAAAwC,QAAAxC,EAAAwC,SAAA,WAAApC,EAAAC,KAAA,IAAAR,EAAA,CAAAO,EAAAE,KAAA,eAAAR,EAAA,eAAAM,EAAA4C,OAAA,mBAAA5C,EAAA4C,OAAA,mBAAA5C,EAAAE,KAAA,GA0EFjB,EAAKkB,SAAS,CAClBxB,SACAI,WAAYQ,EAASkD,KAAKI,cA5EpB,QAAA7C,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA8C,GAAA9C,EAAA,SA+ER+C,QAAQC,IAARhD,EAAA8C,IA/EQ,eAAA9C,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAiFFjB,EAAKkB,SAAS,CAClBtB,aAAa,IAlFP,eAAAmB,EAAA4C,OAAA,6BAAA5C,EAAAiD,SAAA5D,EAAA6D,KAAA,+CAuFZC,+BAAY,SAAAC,IAAA,IAAA7D,EAAA,OAAAO,EAAAzB,EAAA0B,KAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,cAAAmD,EAAApD,KAAA,EAAAoD,EAAAnD,KAAA,EAEFjB,EAAKkB,SAAS,CAClBvB,OAAQ,GACRC,aAAa,IAJP,cAAAwE,EAAAnD,KAAA,EAOe5C,GAAImD,IAAI,qBAPvB,cAOFlB,EAPE8D,EAAAzC,KAAAyC,EAAAnD,KAAA,EAQFjB,EAAKkB,SAAS,CAClBvB,OAAQW,EAASkD,KAAK7D,SAThB,OAAAyE,EAAAnD,KAAA,iBAAAmD,EAAApD,KAAA,GAAAoD,EAAAV,GAAAU,EAAA,SAYRN,QAAQC,IAARK,EAAAV,IAZQ,eAAAU,EAAApD,KAAA,GAAAoD,EAAAnD,KAAA,GAcFjB,EAAKkB,SAAS,CAClBtB,aAAa,IAfP,eAAAwE,EAAAT,OAAA,6BAAAS,EAAAJ,SAAAG,EAAAF,KAAA,qBAoBZI,gCAAa,SAAAC,IAAA,IAAAzE,EAAA,OAAAgB,EAAAzB,EAAA0B,KAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,cACPpB,EAAc2E,OAAOxE,EAAKP,MAAMI,aACpCG,EAAKd,MAAMuF,QAAQ9B,KAAnB,SAAA+B,OAAkC7E,GAAe,IAFtC0E,EAAAtD,KAAA,EAGLjB,EAAKG,YAHA,wBAAAoE,EAAAP,SAAAM,EAAAL,WAMbU,gCAAa,SAAAC,IAAA,IAAA/E,EAAA,OAAAgB,EAAAzB,EAAA0B,KAAA,SAAA+D,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,cACPpB,EAAc2E,OAAOxE,EAAKP,MAAMI,aACT,KAAtBA,GAAe,GAClBG,EAAKd,MAAMuF,QAAQ9B,KAAK,KAExB3C,EAAKd,MAAMuF,QAAQ9B,KAAnB,SAAA+B,OAAiC7E,IALxBgF,EAAA5D,KAAA,EAOLjB,EAAKG,YAPA,wBAAA0E,EAAAb,SAAAY,EAAAX,WAUba,4CAAQ,SAAAC,EAAMjD,GAAN,IAAAkD,EAAA1B,EAAA2B,EAAAC,EAAA,OAAArE,EAAAzB,EAAA0B,KAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,UAEFjB,EAAKD,gBAAgBhD,SAAW,GAClCiD,EAAKC,kBAAkBmF,eAAe,CACpCC,MAAM,EACNC,QAAS,uBACTC,SAAU,OAKTzD,EAAME,MAXL,CAAAmD,EAAAlE,KAAA,eAaE+D,EAAiBhF,EAAKD,gBAAgBhD,SACvB+E,EAAMvF,OAAS,GAdhC,CAAA4I,EAAAlE,KAAA,eAeFjB,EAAKC,kBAAkBmF,eAAe,CACpCC,MAAM,EACNC,QAAS,uBACTC,SAAU,OAlBVJ,EAAAK,OAAA,wBAAAL,EAAAlE,KAAA,EAwBEjB,EAAKC,kBAAkBwF,cAAcT,EAAiBlD,EAAMvF,OAxB9D,cAyBJyD,EAAKD,gBAAkBC,EAAKd,MAAMO,OAG5B6D,EA5BF/D,OAAAmG,EAAA,EAAAnG,CA4BoBS,EAAKD,gBAAgBuD,cACjCX,KAAKb,EAAMY,IA7BnByC,EAAAlE,KAAA,GA8BEjB,EAAKC,kBAAkB0F,kBAAkBrC,GA9B3C,eA+BJtD,EAAKD,gBAAkBC,EAAKd,MAAMO,MAG5BwF,EAlCF1F,OAAAmG,EAAA,EAAAnG,CAkCoBS,EAAKP,MAAMC,QAC7BwF,EAAcD,EAAYW,UAC9B,SAAAC,GAAQ,OAAIA,EAASnD,KAAOZ,EAAMY,KAEpCuC,EAAYC,GAAalD,OAAQ,EAtC7BmD,EAAAlE,KAAA,GAuCEjB,EAAKkB,SAAS,CAClBxB,OAAQuF,IAxCN,yBAAAE,EAAAnB,SAAAe,EAAAd,iEA6CR6B,qDAAiB,SAAAC,EAAMjE,GAAN,OAAAjB,EAAAzB,EAAA0B,KAAA,SAAAkF,GAAA,cAAAA,EAAAhF,KAAAgF,EAAA/E,MAAA,OACfjB,EAAKd,MAAMuF,QAAQ9B,KAAnB,IAAA+B,OAA4B5C,EAAMY,GAAlC,KAAAgC,OAAwCuB,IAAUnE,EAAMhG,SADzC,wBAAAkK,EAAAhC,SAAA+B,EAAA9B,0QA5KTA,KAAKC,mCACLD,KAAK9D,+IA+KJ,IAAA+F,EAAAjC,KAEHkC,EAAc,GAClB,GAAIlC,KAAKxE,MAAMC,SAAW,GAAI,KAAA0G,GAAA,EAAAC,GAAA,EAAAC,OAAA1E,EAAA,IAC5B,IAD4B,IAC5B2E,EAD4BC,EAAA,eACjB1E,EADiByE,EAAAjH,MAE1B6G,EAAYxD,KACVxD,EAAAC,EAAAC,cAACoH,EAAArH,EAAD,CAAMsH,MAAI,EAACC,GAAI,EAAGC,IAAK9E,EAAMY,IAC3BvD,EAAAC,EAAAC,cAACwH,EAAAzH,EAAD,CAAM0H,UAAWC,IAAQ/K,MACvBmD,EAAAC,EAAAC,cAAC2H,EAAA5H,EAAD,CAAgB6H,QAAS,kBAAMf,EAAKJ,eAAehE,KACjD3C,EAAAC,EAAAC,cAAC6H,EAAA9H,EAAD,CACE0H,UAAWC,IAAQvK,MACnB2K,MAAO/I,GAAiB0D,EAAMsF,YAC9BtL,MAAOgG,EAAMhG,QAEfqD,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,CAAa0H,UAAWC,IAAQ9K,aAC9BkD,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,IAAQ5K,WACtBgD,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMyH,UAAWC,IAAQ3K,QACtB0F,EAAMuB,cACD,IAHV,QAKQ,IACP,MACDlE,EAAAC,EAAAC,cAAA,YAAOyC,EAAMnC,SAEfR,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,IAAQ7K,YAAa4F,EAAMhG,OACzCqD,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,IAAQ1K,eAAgByF,EAAMwF,YAGhDnI,EAAAC,EAAAC,cAACkI,EAAAnI,EAAD,CAAa0H,UAAWC,IAAQzK,aAC9B6C,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,IAAQxK,OACnBiL,IAAWC,YAAY3F,EAAMvF,MAAO,MAAO,EAAG,MAEjD4C,EAAAC,EAAAC,cAACqI,EAAAtI,EAAD,CACEuI,MAAM,UACNC,SAAU9F,EAAME,MAChB6F,QAAQ,WACRZ,QAAS,kBAAMf,EAAKpB,MAAMhD,KAEzBA,EAAME,MAAQ,QAAU,YAnCrC8F,EAAoB7D,KAAKxE,MAAMC,OAA/BqD,OAAAC,cAAAoD,GAAAG,EAAAuB,EAAA7G,QAAAgC,MAAAmD,GAAA,EAAuCI,IADX,MAAAtD,GAAAmD,GAAA,EAAAC,EAAApD,EAAA,YAAAkD,GAAA,MAAA0B,EAAA3E,QAAA2E,EAAA3E,SAAA,WAAAkD,EAAA,MAAAC,IA6C9B,OACEnH,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,IAAQlL,MACtBsD,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,IAAQjL,OAAtB,eACCmI,KAAKxE,MAAMG,aACVT,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,IAAQhL,SACtBoD,EAAAC,EAAAC,cAAC0I,EAAA3I,EAAD,CAAkBuI,MAAM,aAG5BxI,EAAAC,EAAAC,cAACoH,EAAArH,EAAD,CAAM4I,WAAS,EAACC,QAAS,IACtB9B,GAEHhH,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,IAAQtK,YACtB0C,EAAAC,EAAAC,cAACqI,EAAAtI,EAAD,CACEyI,QAAQ,WACRF,MAAM,UACNV,QAAShD,KAAKU,WACdiD,SAAU3D,KAAKxE,MAAMI,aAAe,GAJtC,QAQAV,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,IAAQrK,iBAAtB,OAEEyC,EAAAC,EAAAC,cAAA,QAAMyH,UAAWC,IAAQpK,YAAasH,KAAKxE,MAAMI,cAEnDV,EAAAC,EAAAC,cAACqI,EAAAtI,EAAD,CACEyI,QAAQ,WACRF,MAAM,YACNV,QAAShD,KAAKI,WACduD,SAAU3D,KAAKxE,MAAMI,aAAeoE,KAAKxE,MAAMK,YAJjD,iBAtQSoI,mHCiVJlJ,iNA7UbS,MAAQ,CACNiD,GAAI,KACJyF,KAAM,KACNvI,aAAa,EACbkC,MAAO,GACPsG,gBAAiB,GACjBC,QAAS,MAIXtI,gBAAkBC,EAAKd,MAAMO,QAC7BQ,kBAAoBD,EAAKd,MAAMgB,UAS/BoI,qCAAkB,SAAAlI,IAAA,IAAAmI,EAAA7F,EAAAyF,EAAA,OAAAtH,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACVsH,EAAOvI,EAAKd,MAAMmC,SAASmH,SAASC,UAAU,GAAGC,MAAM,KACvDhG,EAAK6F,EAAK,GACVJ,EAAOQ,KAAUJ,EAAMA,EAAKK,OAAS,GAAGxF,KAAK,KAHnCrC,EAAAE,KAAA,EAIVjB,EAAKkB,SAAS,CAClBwB,KACAyF,SANc,wBAAApH,EAAAiD,SAAA5D,EAAA6D,WAUlB4E,oCAAiB,SAAA1E,IAAA,IAAA7D,EAAAwB,EAAAvF,EAAAH,EAAA,OAAAyE,EAAAzB,EAAA0B,KAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,cAAAmD,EAAApD,KAAA,EAAAoD,EAAAnD,KAAA,EAEPjB,EAAKkB,SAAS,CAClBY,MAAO,GACPlC,aAAa,IAJF,cAAAwE,EAAAnD,KAAA,EAOU5C,GAAImD,IAAJ,UAAAkD,OAAkB1E,EAAKP,MAAMiD,KAPvC,cAOPpC,EAPO8D,EAAAzC,MAQPG,EAAQxB,EAASkD,MAGjBsF,UAAYC,KAAIjH,EAAMnC,OAAQ,QAAQyD,KAAK,MACjDtB,EAAMnD,SAAWoK,KAAIjH,EAAMkH,iBAAkB,QAAQ5F,KAAK,MAGtD7G,EAAQ,GACNH,EAAS0F,EAAMuB,eACP,EACZ9G,EAAQ,KACCH,GAAU,EACnBG,EAAQ,KACCH,GAAU,EACnBG,EAAQ,MACCH,GAAU,KACnBG,EAAQ,OAEVuF,EAAMvF,MAAQA,EAGduF,EAAME,WAIEJ,IAHNY,IACExC,EAAKD,gBAAgBuD,YACrB,SAAAC,GAAO,OAAIA,IAAYzB,EAAMY,KAhCpB0B,EAAAnD,KAAA,GAmCPjB,EAAKkB,SAAS,CAClBY,UApCW,QAAAsC,EAAAnD,KAAA,iBAAAmD,EAAApD,KAAA,GAAAoD,EAAAV,GAAAU,EAAA,SAuCbN,QAAQC,IAARK,EAAAV,IAvCa,eAAAU,EAAApD,KAAA,GAAAoD,EAAAnD,KAAA,GAyCPjB,EAAKkB,SAAS,CAClBtB,aAAa,IA1CF,eAAAwE,EAAAT,OAAA,6BAAAS,EAAAJ,SAAAG,EAAAF,KAAA,qBA+CjBgF,4CAAyB,SAAA3E,IAAA,IAAAhE,EAAA,OAAAO,EAAAzB,EAAA0B,KAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,cAAAsD,EAAAvD,KAAA,EAAAuD,EAAAtD,KAAA,EAEfjB,EAAKkB,SAAS,CAClBkH,gBAAiB,GACjBxI,aAAa,IAJM,cAAA2E,EAAAtD,KAAA,EAOE5C,GAAImD,IAAJ,UAAAkD,OAAkB1E,EAAKP,MAAMiD,GAA7B,qBAPF,cAOfpC,EAPeiE,EAAA5C,KAAA4C,EAAAtD,KAAA,EAQfjB,EAAKkB,SAAS,CAClBkH,gBAAiB9H,EAASkD,KAAKC,UATZ,OAAAc,EAAAtD,KAAA,iBAAAsD,EAAAvD,KAAA,GAAAuD,EAAAb,GAAAa,EAAA,SAYrBT,QAAQC,IAARQ,EAAAb,IAZqB,eAAAa,EAAAvD,KAAA,GAAAuD,EAAAtD,KAAA,GAcfjB,EAAKkB,SAAS,CAClBtB,aAAa,IAfM,eAAA2E,EAAAZ,OAAA,6BAAAY,EAAAP,SAAAM,EAAAL,KAAA,qBAoBzBiF,qCAAkB,SAAAtE,IAAA,IAAAtE,EAAA,OAAAO,EAAAzB,EAAA0B,KAAA,SAAA+D,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,cAAA4D,EAAA7D,KAAA,EAAA6D,EAAA5D,KAAA,EAERjB,EAAKkB,SAAS,CAClBmH,QAAS,GACTzI,aAAa,IAJD,cAAAiF,EAAA5D,KAAA,EAOS5C,GAAImD,IAAJ,UAAAkD,OAAkB1E,EAAKP,MAAMiD,GAA7B,aAPT,cAORpC,EAPQuE,EAAAlD,KAAAkD,EAAA5D,KAAA,EAQRjB,EAAKkB,SAAS,CAClBmH,QAAS/H,EAASkD,KAAKC,UATX,OAAAoB,EAAA5D,KAAA,iBAAA4D,EAAA7D,KAAA,GAAA6D,EAAAnB,GAAAmB,EAAA,SAYdf,QAAQC,IAARc,EAAAnB,IAZc,eAAAmB,EAAA7D,KAAA,GAAA6D,EAAA5D,KAAA,GAcRjB,EAAKkB,SAAS,CAClBtB,aAAa,IAfD,eAAAiF,EAAAlB,OAAA,6BAAAkB,EAAAb,SAAAY,EAAAX,KAAA,qBAoBlBkF,sDAAkB,SAAApE,EAAMjD,GAAN,OAAAjB,EAAAzB,EAAA0B,KAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,cAAAkE,EAAAlE,KAAA,EAEVjB,EAAKd,MAAMuF,QAAQ9B,KAAnB,IAAA+B,OAA4B5C,EAAMY,GAAlC,KAAAgC,OAAwCuB,IAAUnE,EAAMhG,SAF9C,cAAAqJ,EAAAlE,KAAA,EAGVjB,EAAKsI,kBAHK,cAAAnD,EAAAlE,KAAA,EAIVjB,EAAK6I,iBAJK,cAAA1D,EAAAlE,KAAA,EAKVjB,EAAKiJ,yBALK,cAAA9D,EAAAlE,KAAA,GAMVjB,EAAKkJ,kBANK,yBAAA/D,EAAAnB,SAAAe,EAAAd,iEASlBa,2BAAQ,SAAAiB,IAAA,IAAAf,EAAA1B,EAAA8F,EAAA,OAAAvI,EAAAzB,EAAA0B,KAAA,SAAAkF,GAAA,cAAAA,EAAAhF,KAAAgF,EAAA/E,MAAA,UAEFjB,EAAKD,gBAAgBhD,SAAW,GAClCiD,EAAKC,kBAAkBmF,eAAe,CACpCC,MAAM,EACNC,QAAS,uBACTC,SAAU,OAKTvF,EAAKP,MAAMqC,MAAME,MAXhB,CAAAgE,EAAA/E,KAAA,eAaE+D,EAAiBhF,EAAKD,gBAAgBhD,SACvBiD,EAAKP,MAAMqC,MAAMvF,OAAS,GAd3C,CAAAyJ,EAAA/E,KAAA,eAeFjB,EAAKC,kBAAkBmF,eAAe,CACpCC,MAAM,EACNC,QAAS,uBACTC,SAAU,OAlBVS,EAAAR,OAAA,wBAAAQ,EAAA/E,KAAA,EAwBEjB,EAAKC,kBAAkBwF,cAC3BT,EAAiBhF,EAAKP,MAAMqC,MAAMvF,OAzBhC,cA2BJyD,EAAKD,gBAAkBC,EAAKd,MAAMO,OAG5B6D,EA9BF/D,OAAAmG,EAAA,EAAAnG,CA8BoBS,EAAKD,gBAAgBuD,cACjCX,KAAK3C,EAAKP,MAAMqC,MAAMY,IA/B9BsD,EAAA/E,KAAA,GAgCEjB,EAAKC,kBAAkB0F,kBAAkBrC,GAhC3C,eAiCJtD,EAAKD,gBAAkBC,EAAKd,MAAMO,OAG5B2J,EApCF7J,OAAAwC,EAAA,EAAAxC,CAAA,GAoCoBS,EAAKP,MAAMqC,QACxBE,OAAQ,EArCfgE,EAAA/E,KAAA,GAsCEjB,EAAKkB,SAAS,CAClBY,MAAOsH,IAvCL,yBAAApD,EAAAhC,SAAA+B,EAAA9B,qNAhHAA,KAAKqE,yCACLrE,KAAK4E,wCACL5E,KAAKgF,gDACLhF,KAAKiF,qJAyJJ,IAAAhD,EAAAjC,KAAAoF,EACqCpF,KAAKxE,MAAzCqC,EADDuH,EACCvH,MAAOsG,EADRiB,EACQjB,gBAAiBC,EADzBgB,EACyBhB,QAE5BiB,EAAanK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmK,SAAA,MACbC,EAAqB,GACrBC,EAAc,GAClB,IAAKC,KAAQ5H,GAAQ,CAEnB,GAAI4H,KAAQtB,GACVoB,EACErK,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQlJ,kBAAtB,+CAIG,KAAA0C,GAAA,EAAAC,GAAA,EAAAC,OAAAmB,EAAA,IACL,IADK,IACLhB,EADKF,EAAA,eACMiJ,EADN/I,EAAAtB,MAEHkK,EAAmB7G,KACjBxD,EAAAC,EAAAC,cAACoH,EAAArH,EAAD,CAAMsH,MAAI,EAACC,GAAI,EAAGC,IAAK+C,EAAejH,IACpCvD,EAAAC,EAAAC,cAACwH,EAAAzH,EAAD,CAAM0H,UAAWC,KAAQ/K,MACvBmD,EAAAC,EAAAC,cAAC2H,EAAA5H,EAAD,CACE6H,QAAS,kBAAMf,EAAKiD,gBAAgBQ,KAEpCxK,EAAAC,EAAAC,cAAC6H,EAAA9H,EAAD,CACE0H,UAAWC,KAAQvK,MACnB2K,MAAO/I,GAAiBuL,EAAevC,YACvCtL,MAAO6N,EAAe7N,QAExBqD,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,CAAa0H,UAAWC,KAAQ9K,aAC9BkD,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQ7K,YAAayN,EAAe7N,OAClDqD,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQ1K,eACnBsN,EAAerC,gBAf9B3G,EAA6ByH,EAA7BrF,OAAAC,cAAAzC,GAAAK,EAAAD,EAAAM,QAAAgC,MAAA1C,GAAA,EAA8CG,IADzC,MAAAwC,GAAA1C,GAAA,EAAAC,EAAAyC,EAAA,YAAA3C,GAAA,MAAAI,EAAAwC,QAAAxC,EAAAwC,SAAA,WAAA3C,EAAA,MAAAC,IA2BP,GAAIiJ,KAAQrB,GACVoB,EACEtK,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQ9I,WAAtB,8CAIG,KAAAgE,GAAA,EAAAC,GAAA,EAAAC,OAAAP,EAAA,IACL,IADK,IACLQ,EADKC,EAAA,eACMuH,EADNxH,EAAA9C,MAEHmK,EAAY9G,KACVxD,EAAAC,EAAAC,cAACoH,EAAArH,EAAD,CAAMsH,MAAI,EAACC,GAAI,EAAGC,IAAKgD,EAAIlH,IACzBvD,EAAAC,EAAAC,cAACwH,EAAAzH,EAAD,CAAM0H,UAAWC,KAAQ/K,MACvBmD,EAAAC,EAAAC,cAAC2H,EAAA5H,EAAD,CAAgB6H,QAAS,kBAAMf,EAAKiD,gBAAgBS,KAClDzK,EAAAC,EAAAC,cAAC6H,EAAA9H,EAAD,CACE0H,UAAWC,KAAQvK,MACnB2K,MAAO/I,GAAiBwL,EAAIxC,YAC5BtL,MAAO8N,EAAI9N,QAEbqD,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,CAAa0H,UAAWC,KAAQ9K,aAC9BkD,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQ7K,YAAa0N,EAAI9N,OACvCqD,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQ1K,eAAgBuN,EAAItC,gBAZtDzE,EAAkBwF,EAAlBtF,OAAAC,cAAAf,GAAAG,EAAAS,EAAA5B,QAAAgC,MAAAhB,GAAA,EAA2BI,IADtB,MAAAa,GAAAhB,GAAA,EAAAC,EAAAe,EAAA,YAAAjB,GAAA,MAAAY,EAAAM,QAAAN,EAAAM,SAAA,WAAAjB,EAAA,MAAAC,IAuBPmH,EACEnK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmK,SAAA,KAEGtF,KAAKxE,MAAMG,aACVT,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,KAAQhL,SACtBoD,EAAAC,EAAAC,cAAC0I,EAAA3I,EAAD,CAAkBuI,MAAM,aAK5BxI,EAAAC,EAAAC,cAAA,OACEwK,IAAKzL,GAAiB0D,EAAMgI,cAC5BC,IAAI,WACJjD,UAAWC,KAAQ5J,gBAIrBgC,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,KAAQ3J,UACtB+B,EAAAC,EAAAC,cAACwH,EAAAzH,EAAD,CAAM0H,UAAWC,KAAQ/K,MACvBmD,EAAAC,EAAAC,cAAC6H,EAAA9H,EAAD,CACE0H,UAAWC,KAAQvK,MACnB2K,MAAO/I,GAAiB0D,EAAMsF,YAC9BtL,MAAOgG,EAAMhG,QAEfqD,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,KAAQ1J,YACtB8B,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,CAAa0H,UAAWC,KAAQ9K,aAC9BkD,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQ7K,YAAa4F,EAAMhG,OACzCqD,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQzJ,cAAewE,EAAMkI,SAC3C7K,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQxJ,aACpB4B,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,QAAMyH,UAAWC,KAAQvJ,aACtBsE,EAAMuB,cACD,IAJV,QAOAlE,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQtJ,YACpB0B,EAAAC,EAAAC,cAAA,oBACCyC,EAAMgH,WAET3J,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQrJ,eACpByB,EAAAC,EAAAC,cAAA,uBACCyC,EAAMnD,UAETQ,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQpJ,cACpBwB,EAAAC,EAAAC,cAAA,2BACC4K,KAAOnI,EAAMoI,aAAc,iBAE9B/K,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQ1K,eAAtB,IAAuCyF,EAAMwF,SAA7C,MAEFnI,EAAAC,EAAAC,cAACkI,EAAAnI,EAAD,CAAa0H,UAAWC,KAAQzK,aAC9B6C,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQxK,OACnBiL,IAAWC,YAAY3F,EAAMvF,MAAO,MAAO,EAAG,MAEjD4C,EAAAC,EAAAC,cAACqI,EAAAtI,EAAD,CACEuI,MAAM,YACNC,SAAU9F,EAAME,MAChB6F,QAAQ,WACRZ,QAAShD,KAAKa,OAEbhD,EAAME,MAAQ,QAAU,WAQnC7C,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,KAAQnJ,qBACtBuB,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQjJ,qBAAtB,mBACAqB,EAAAC,EAAAC,cAACoH,EAAArH,EAAD,CACE4I,WAAS,EACTC,QAAS,GACTnB,UAAWC,KAAQhJ,yBAElByL,IAKLrK,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,KAAQ/I,cACtBmB,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,KAAQ7I,cAAtB,WACAiB,EAAAC,EAAAC,cAACoH,EAAArH,EAAD,CAAM4I,WAAS,EAACC,QAAS,GAAInB,UAAWC,KAAQ5I,kBAC7CsL,KAOX,OAAOtK,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,KAAQ7J,QAASoM,UA1UvBpB,cC8ENiC,8MAvFb1K,MAAQ,CACN1C,QAAS,IACTqN,SAAU,CACR/E,MAAM,EACNC,QAAS,GACTC,SAAU,MAEZjC,YAAa,MAGfmC,cAAgB,SAAA4E,GACdrK,EAAKkB,SAAS,CACZnE,QAASsN,OAIbjF,eAAiB,SAAAkF,GAAiC,IAA9BjF,EAA8BiF,EAA9BjF,KAAMC,EAAwBgF,EAAxBhF,QAASC,EAAe+E,EAAf/E,SACjCvF,EAAKkB,SAAS,CACZkJ,SAAU,CAAE/E,OAAMC,UAASC,iBAI/BI,kBAAoB,SAAA4E,GAClBvK,EAAKkB,SAAS,CACZoC,YAAaiH,6EAIR,IAAArE,EAAAjC,KACP,OACE9E,EAAAC,EAAAC,cAACP,GAAD,CACEQ,MAAO,CACLG,MAAOwE,KAAKxE,MACZS,QAAS,CACPuF,cAAexB,KAAKwB,cACpBL,eAAgBnB,KAAKmB,eACrBO,kBAAmB1B,KAAK0B,qBAI5BxG,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,IAAQnK,SAEtBuC,EAAAC,EAAAC,cAACmL,EAAApL,EAAD,CACEqL,aAAc,CACZC,SAAU,MACVC,WAAY,UAEdtF,KAAMpB,KAAKxE,MAAM2K,SAAS/E,KAC1BuF,iBAAkB3G,KAAKxE,MAAM2K,SAAS7E,SACtCsF,QAAS,kBACP3E,EAAKhF,SAAS,CACZkJ,SAAU,CACR/E,MAAM,EACNC,QAAS,GACTC,SAAU,SAIhBD,QAASrB,KAAKxE,MAAM2K,SAAS9E,UAI/BnG,EAAAC,EAAAC,cAACyL,EAAA1L,EAAD,CAAQ0H,UAAWC,IAAQlK,OAAQkO,SAAS,QAAQpD,MAAM,WACxDxI,EAAAC,EAAAC,cAAC2L,EAAA5L,EAAD,KACED,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,IAAQjK,aAAtB,YACAqC,EAAAC,EAAAC,cAAA,KAAGyH,UAAWC,IAAQhK,SAAtB,KACK,IACHoC,EAAAC,EAAAC,cAAA,QAAMyH,UAAWC,IAAQ/J,eACtBwK,IAAWC,YAAYxD,KAAKxE,MAAM1C,QAAS,GAAI,EAAG,SAO3DoC,EAAAC,EAAAC,cAAA,OAAKyH,UAAWC,IAAQ9J,WACtBkC,EAAAC,EAAAC,cAAC4L,EAAA,EAAD,KACE9L,EAAAC,EAAAC,cAAC6L,EAAA,EAAD,CAAO3C,KAAK,IAAI4C,OAAK,EAACC,UAAWC,KACjClM,EAAAC,EAAAC,cAAC6L,EAAA,EAAD,CAAO3C,KAAK,gBAAgB6C,UAAWE,gBA/EnCpD,aCFEqD,QACW,cAA7BC,OAAOnK,SAASoK,UAEe,UAA7BD,OAAOnK,SAASoK,UAEhBD,OAAOnK,SAASoK,SAASlJ,MACvB,2DCVN,IAAMmJ,GACJvM,EAAAC,EAAAC,cAACsM,EAAA,EAAD,CAAeC,SAAS,aACtBzM,EAAAC,EAAAC,cAACqM,GAAD,OAIJG,IAASC,OAAOJ,GAAKK,SAASC,eAAe,SDmHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7dc66aac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__zRGmq\",\"title\":\"home_title__Mrm6W\",\"loading\":\"home_loading__27nhd\",\"card\":\"home_card__2XMws\",\"cardContent\":\"home_cardContent__1Rr5_\",\"movieTitle\":\"home_movieTitle__OFJmU\",\"movieMeta\":\"home_movieMeta__3k7Nm\",\"rating\":\"home_rating__20Uaj\",\"movieOverview\":\"home_movieOverview__13YgQ\",\"cardActions\":\"home_cardActions__RrzC5\",\"price\":\"home_price__3St5w\",\"media\":\"home_media__1wVcI\",\"pagination\":\"home_pagination__q5MNO\",\"currentPageText\":\"home_currentPageText__2XbMb\",\"pageNumber\":\"home_pageNumber__1RNET\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootApp\":\"app_rootApp__3iDhW\",\"navbar\":\"app_navbar__3VJ_g\",\"navbarTitle\":\"app_navbarTitle__3npjq\",\"balance\":\"app_balance__12kqd\",\"balanceAmount\":\"app_balanceAmount__18NFD\",\"rootPages\":\"app_rootPages__3Uj55\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"detail\":\"detail_detail__h3D94\",\"loading\":\"detail_loading__2Ueww\",\"backdropImage\":\"detail_backdropImage__7DPcd\",\"mainArea\":\"detail_mainArea__39-3e\",\"card\":\"detail_card__wmBXr\",\"media\":\"detail_media__mg7SW\",\"cardDetail\":\"detail_cardDetail__15KJX\",\"cardContent\":\"detail_cardContent__1cgVq\",\"movieTitle\":\"detail_movieTitle__1AkUc\",\"movieTagline\":\"detail_movieTagline__1c3FZ\",\"movieRating\":\"detail_movieRating__v0tTU\",\"ratingValue\":\"detail_ratingValue__1o4I9\",\"movieGenre\":\"detail_movieGenre__1GLmy\",\"movieLanguage\":\"detail_movieLanguage__3zz86\",\"movieRelease\":\"detail_movieRelease__3LrB9\",\"movieOverview\":\"detail_movieOverview__1wbNo\",\"cardActions\":\"detail_cardActions__27uI_\",\"price\":\"detail_price__2-ZGt\",\"movieRecommendation\":\"detail_movieRecommendation__3PcpI\",\"noRecommendation\":\"detail_noRecommendation__2FagM\",\"recommendationTitle\":\"detail_recommendationTitle__2eecE\",\"recommendationContainer\":\"detail_recommendationContainer__6AZRb\",\"movieSimilar\":\"detail_movieSimilar__1Gie1\",\"noSimilar\":\"detail_noSimilar__1TdDZ\",\"similarTitle\":\"detail_similarTitle__2Y3ZR\",\"similarContainer\":\"detail_similarContainer__1hbs7\"};","// Base Url for the API Request\nexport const BASE_URL = 'https://api.themoviedb.org/3/'\n\n// Key for request to API\nexport const API_KEY = '81eb02a0cbd582697702eff26e790972'\n\n// Base Url for Images from API\nexport const BASE_URL_IMAGE = 'https://image.tmdb.org/t/p/original'\n","import axios from 'axios'\nimport { BASE_URL, API_KEY } from './env'\n\nconst API = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n})\n\nexport default API\n","import React from 'react'\n\nexport const { Provider, Consumer } = React.createContext({})\n\nexport const contextWrapper = WrappedComponent => {\n  return props => {\n    return (\n      <Consumer>{value => <WrappedComponent {...props} {...value} />}</Consumer>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport qs from 'query-string'\nimport accounting from 'accounting'\nimport kebabCase from 'lodash/kebabCase'\nimport find from 'lodash/find'\n\nimport Classes from './home.module.scss'\n\nimport { BASE_URL_IMAGE } from '../../services/env'\nimport API from '../../services/services'\n\nimport { contextWrapper } from '../../contextApi/context'\n\nclass Home extends Component {\n  state = {\n    movies: [],\n    genres: [],\n    showLoading: true,\n    currentPage: 1,\n    totalPages: 1,\n  }\n\n  // Context API\n  contextApiState = this.props.state\n  contextApiActions = this.props.actions\n\n  async componentDidMount() {\n    await this.getGenres()\n    await this.getMovies()\n  }\n\n  getMovies = async () => {\n    try {\n      await this.setState({\n        movies: [],\n        showLoading: true,\n      })\n\n      // Get page from url params\n      const pageFromUrl = qs.parse(this.props.location.search).page\n      if (pageFromUrl) {\n        await this.setState({\n          currentPage: pageFromUrl,\n        })\n      } else {\n        await this.setState({\n          currentPage: 1,\n        })\n      }\n\n      const response = await API.get('/movie/now_playing', {\n        params: {\n          page: this.state.currentPage,\n          sort_by: 'release_date.desc',\n          region: 'ID',\n        },\n      })\n\n      // NOTE: Because the data of 'Now Playing in Indonesia' is not much,\n      // I recommend if you want to test with the complete data,\n      // change the params above like this one:\n      //      params: {\n      //        page: this.state.currentPage,\n      //        sort_by: 'popularity.desc',\n      //      },\n\n      const movies = []\n      for (const result of response.data.results) {\n        const movie = {\n          ...result,\n          owned: false,\n        }\n\n        // Generate movie genre based on it's IDs\n        const genres = []\n        for (const genre_id of result.genre_ids) {\n          const match = this.state.genres.find(genre => genre.id === genre_id)\n          genres.push(match.name)\n        }\n        movie.genres = genres.join(', ')\n\n        // Calculate the price\n        let price = 0\n        const rating = result.vote_average\n        if (rating <= 3) {\n          price = 3500\n        } else if (rating <= 6) {\n          price = 8250\n        } else if (rating <= 8) {\n          price = 16350\n        } else if (rating <= 10) {\n          price = 21250\n        }\n        movie.price = price\n\n        // Check whether already owned or not\n        movie.owned =\n          find(\n            this.contextApiState.moviesOwned,\n            movieId => movieId === result.id\n          ) !== undefined\n\n        movies.push(movie)\n      }\n\n      await this.setState({\n        movies,\n        totalPages: response.data.total_pages,\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      await this.setState({\n        showLoading: false,\n      })\n    }\n  }\n\n  getGenres = async () => {\n    try {\n      await this.setState({\n        genres: [],\n        showLoading: true,\n      })\n\n      const response = await API.get('/genre/movie/list')\n      await this.setState({\n        genres: response.data.genres,\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      await this.setState({\n        showLoading: false,\n      })\n    }\n  }\n\n  onNextPage = async () => {\n    let currentPage = Number(this.state.currentPage)\n    this.props.history.push(`?page=${(currentPage += 1)}`)\n    await this.getMovies()\n  }\n\n  onPrevPage = async () => {\n    let currentPage = Number(this.state.currentPage)\n    if ((currentPage -= 1) === 1) {\n      this.props.history.push('/')\n    } else {\n      this.props.history.push(`?page=${currentPage}`)\n    }\n    await this.getMovies()\n  }\n\n  onBuy = async movie => {\n    // 1. Check minimum balance to prevent insufficient balance\n    if (this.contextApiState.balance <= 0) {\n      this.contextApiActions.updateSnackbar({\n        open: true,\n        message: 'Insufficient Balance',\n        duration: 1500,\n      })\n    }\n\n    // 2. Check if owned\n    if (!movie.owned) {\n      // 1. Check if balance is enough to deduct current price\n      const currentBalance = this.contextApiState.balance\n      if (currentBalance - movie.price <= 0) {\n        this.contextApiActions.updateSnackbar({\n          open: true,\n          message: 'Insufficient Balance',\n          duration: 1500,\n        })\n        return\n      }\n\n      // 2. Update ContextAPI Balance\n      await this.contextApiActions.updateBalance(currentBalance - movie.price)\n      this.contextApiState = this.props.state\n\n      // 3. Add the id to list of movies owned\n      const moviesOwned = [...this.contextApiState.moviesOwned]\n      moviesOwned.push(movie.id)\n      await this.contextApiActions.updateMoviesOwned(moviesOwned)\n      this.contextApiState = this.props.state\n\n      // 4. Change button style\n      const moviesClone = [...this.state.movies]\n      const updateIndex = moviesClone.findIndex(\n        movieObj => movieObj.id === movie.id\n      )\n      moviesClone[updateIndex].owned = true\n      await this.setState({\n        movies: moviesClone,\n      })\n    }\n  }\n\n  goToDetailPage = async movie => {\n    this.props.history.push(`/${movie.id}-${kebabCase(movie.title)}`)\n  }\n\n  render() {\n    // Render cards with data from API\n    let moviesCards = []\n    if (this.state.movies !== []) {\n      for (const movie of this.state.movies) {\n        moviesCards.push(\n          <Grid item xs={3} key={movie.id}>\n            <Card className={Classes.card}>\n              <CardActionArea onClick={() => this.goToDetailPage(movie)}>\n                <CardMedia\n                  className={Classes.media}\n                  image={BASE_URL_IMAGE + movie.poster_path}\n                  title={movie.title}\n                />\n                <CardContent className={Classes.cardContent}>\n                  <div className={Classes.movieMeta}>\n                    <span>\n                      <span className={Classes.rating}>\n                        {movie.vote_average}\n                      </span>{' '}\n                      / 10\n                    </span>{' '}\n                    {' - '}\n                    <span>{movie.genres}</span>\n                  </div>\n                  <p className={Classes.movieTitle}>{movie.title}</p>\n                  <p className={Classes.movieOverview}>{movie.overview}</p>\n                </CardContent>\n              </CardActionArea>\n              <CardActions className={Classes.cardActions}>\n                <p className={Classes.price}>\n                  {accounting.formatMoney(movie.price, 'Rp ', 0, '.')}\n                </p>\n                <Button\n                  color=\"primary\"\n                  disabled={movie.owned}\n                  variant=\"outlined\"\n                  onClick={() => this.onBuy(movie)}\n                >\n                  {movie.owned ? 'Owned' : 'Buy'}\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        )\n      }\n    }\n\n    return (\n      <div className={Classes.home}>\n        <p className={Classes.title}>Now Playing</p>\n        {this.state.showLoading && (\n          <div className={Classes.loading}>\n            <CircularProgress color=\"primary\" />\n          </div>\n        )}\n        <Grid container spacing={24}>\n          {moviesCards}\n        </Grid>\n        <div className={Classes.pagination}>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={this.onPrevPage}\n            disabled={this.state.currentPage <= 1}\n          >\n            Prev\n          </Button>\n          <p className={Classes.currentPageText}>\n            Page\n            <span className={Classes.pageNumber}>{this.state.currentPage}</span>\n          </p>\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={this.onNextPage}\n            disabled={this.state.currentPage >= this.state.totalPages}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default contextWrapper(Home)\n","import React, { Component } from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Button from '@material-ui/core/Button'\nimport takeRight from 'lodash/takeRight'\nimport isEmpty from 'lodash/isEmpty'\nimport map from 'lodash/map'\nimport find from 'lodash/find'\nimport kebabCase from 'lodash/kebabCase'\nimport format from 'date-fns/format'\nimport accounting from 'accounting'\n\nimport Classes from './detail.module.scss'\n\nimport { BASE_URL_IMAGE } from '../../services/env'\nimport API from '../../services/services'\n\nimport { contextWrapper } from '../../contextApi/context'\n\nclass Detail extends Component {\n  state = {\n    id: null,\n    slug: null,\n    showLoading: false,\n    movie: {},\n    recommendations: [],\n    similar: [],\n  }\n\n  // Context API\n  contextApiState = this.props.state\n  contextApiActions = this.props.actions\n\n  async componentWillMount() {\n    await this.setInitialState()\n    await this.getMovieDetail()\n    await this.getMovieRecommendation()\n    await this.getMovieSimilar()\n  }\n\n  setInitialState = async () => {\n    const path = this.props.location.pathname.substring(1).split('-')\n    const id = path[0]\n    const slug = takeRight(path, path.length - 1).join('-')\n    await this.setState({\n      id,\n      slug,\n    })\n  }\n\n  getMovieDetail = async () => {\n    try {\n      await this.setState({\n        movie: {},\n        showLoading: true,\n      })\n\n      const response = await API.get(`/movie/${this.state.id}`)\n      const movie = response.data\n\n      // Generate text data from array data\n      movie.genreText = map(movie.genres, 'name').join(', ')\n      movie.language = map(movie.spoken_languages, 'name').join(', ')\n\n      // Calculate the price\n      let price = 0\n      const rating = movie.vote_average\n      if (rating <= 3) {\n        price = 3500\n      } else if (rating <= 6) {\n        price = 8250\n      } else if (rating <= 8) {\n        price = 16350\n      } else if (rating <= 10) {\n        price = 21250\n      }\n      movie.price = price\n\n      // Check whether already owned or not\n      movie.owned =\n        find(\n          this.contextApiState.moviesOwned,\n          movieId => movieId === movie.id\n        ) !== undefined\n\n      await this.setState({\n        movie,\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      await this.setState({\n        showLoading: false,\n      })\n    }\n  }\n\n  getMovieRecommendation = async () => {\n    try {\n      await this.setState({\n        recommendations: [],\n        showLoading: true,\n      })\n\n      const response = await API.get(`/movie/${this.state.id}/recommendations`)\n      await this.setState({\n        recommendations: response.data.results,\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      await this.setState({\n        showLoading: false,\n      })\n    }\n  }\n\n  getMovieSimilar = async () => {\n    try {\n      await this.setState({\n        similar: [],\n        showLoading: true,\n      })\n\n      const response = await API.get(`/movie/${this.state.id}/similar`)\n      await this.setState({\n        similar: response.data.results,\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      await this.setState({\n        showLoading: false,\n      })\n    }\n  }\n\n  showMovieDetail = async movie => {\n    // await this.props.actions.updateIsSelectedMovieOwned(true)\n    await this.props.history.push(`/${movie.id}-${kebabCase(movie.title)}`)\n    await this.setInitialState()\n    await this.getMovieDetail()\n    await this.getMovieRecommendation()\n    await this.getMovieSimilar()\n  }\n\n  onBuy = async () => {\n    // 1. Check minimum balance to prevent insufficient balance\n    if (this.contextApiState.balance <= 0) {\n      this.contextApiActions.updateSnackbar({\n        open: true,\n        message: 'Insufficient Balance',\n        duration: 1500,\n      })\n    }\n\n    // 2. Check if owned\n    if (!this.state.movie.owned) {\n      // 1. Check if balance is enough to deduct current price\n      const currentBalance = this.contextApiState.balance\n      if (currentBalance - this.state.movie.price <= 0) {\n        this.contextApiActions.updateSnackbar({\n          open: true,\n          message: 'Insufficient Balance',\n          duration: 1500,\n        })\n        return\n      }\n\n      // 2. Update ContextAPI Balance\n      await this.contextApiActions.updateBalance(\n        currentBalance - this.state.movie.price\n      )\n      this.contextApiState = this.props.state\n\n      // 3. Add the id to list of movies owned\n      const moviesOwned = [...this.contextApiState.moviesOwned]\n      moviesOwned.push(this.state.movie.id)\n      await this.contextApiActions.updateMoviesOwned(moviesOwned)\n      this.contextApiState = this.props.state\n\n      // 4. Change button style\n      const movieClone = { ...this.state.movie }\n      movieClone.owned = true\n      await this.setState({\n        movie: movieClone,\n      })\n    }\n  }\n\n  render() {\n    const { movie, recommendations, similar } = this.state\n\n    let detailView = <></>\n    let recommendationView = []\n    let similarView = []\n    if (!isEmpty(movie)) {\n      // Recommendations View\n      if (isEmpty(recommendations)) {\n        recommendationView = (\n          <p className={Classes.noRecommendation}>\n            Sorry, no recommendation for this movie\n          </p>\n        )\n      } else {\n        for (const recommendation of recommendations) {\n          recommendationView.push(\n            <Grid item xs={3} key={recommendation.id}>\n              <Card className={Classes.card}>\n                <CardActionArea\n                  onClick={() => this.showMovieDetail(recommendation)}\n                >\n                  <CardMedia\n                    className={Classes.media}\n                    image={BASE_URL_IMAGE + recommendation.poster_path}\n                    title={recommendation.title}\n                  />\n                  <CardContent className={Classes.cardContent}>\n                    <p className={Classes.movieTitle}>{recommendation.title}</p>\n                    <p className={Classes.movieOverview}>\n                      {recommendation.overview}\n                    </p>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Grid>\n          )\n        }\n      }\n\n      // Similar View\n      if (isEmpty(similar)) {\n        similarView = (\n          <p className={Classes.noSimilar}>\n            Sorry, no similar items for this movie\n          </p>\n        )\n      } else {\n        for (const sim of similar) {\n          similarView.push(\n            <Grid item xs={3} key={sim.id}>\n              <Card className={Classes.card}>\n                <CardActionArea onClick={() => this.showMovieDetail(sim)}>\n                  <CardMedia\n                    className={Classes.media}\n                    image={BASE_URL_IMAGE + sim.poster_path}\n                    title={sim.title}\n                  />\n                  <CardContent className={Classes.cardContent}>\n                    <p className={Classes.movieTitle}>{sim.title}</p>\n                    <p className={Classes.movieOverview}>{sim.overview}</p>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Grid>\n          )\n        }\n      }\n\n      // Details View\n      detailView = (\n        <>\n          {/* Loading State */}\n          {this.state.showLoading && (\n            <div className={Classes.loading}>\n              <CircularProgress color=\"primary\" />\n            </div>\n          )}\n\n          {/* Backdrop Image */}\n          <img\n            src={BASE_URL_IMAGE + movie.backdrop_path}\n            alt=\"backdrop\"\n            className={Classes.backdropImage}\n          />\n\n          {/* Movie Details */}\n          <div className={Classes.mainArea}>\n            <Card className={Classes.card}>\n              <CardMedia\n                className={Classes.media}\n                image={BASE_URL_IMAGE + movie.poster_path}\n                title={movie.title}\n              />\n              <div className={Classes.cardDetail}>\n                <CardContent className={Classes.cardContent}>\n                  <p className={Classes.movieTitle}>{movie.title}</p>\n                  <p className={Classes.movieTagline}>{movie.tagline}</p>\n                  <p className={Classes.movieRating}>\n                    <b>Rating: </b>\n                    <span className={Classes.ratingValue}>\n                      {movie.vote_average}\n                    </span>{' '}\n                    / 10\n                  </p>\n                  <p className={Classes.movieGenre}>\n                    <b>Genre: </b>\n                    {movie.genreText}\n                  </p>\n                  <p className={Classes.movieLanguage}>\n                    <b>Language: </b>\n                    {movie.language}\n                  </p>\n                  <p className={Classes.movieRelease}>\n                    <b>Release Date: </b>\n                    {format(movie.release_date, 'DD MMMM YYYY')}\n                  </p>\n                  <p className={Classes.movieOverview}>\"{movie.overview}\"</p>\n                </CardContent>\n                <CardActions className={Classes.cardActions}>\n                  <p className={Classes.price}>\n                    {accounting.formatMoney(movie.price, 'Rp ', 0, '.')}\n                  </p>\n                  <Button\n                    color=\"secondary\"\n                    disabled={movie.owned}\n                    variant=\"outlined\"\n                    onClick={this.onBuy}\n                  >\n                    {movie.owned ? 'Owned' : 'Buy'}\n                  </Button>\n                </CardActions>\n              </div>\n            </Card>\n          </div>\n\n          {/* Movie Recommendations */}\n          <div className={Classes.movieRecommendation}>\n            <p className={Classes.recommendationTitle}>Recommendations</p>\n            <Grid\n              container\n              spacing={24}\n              className={Classes.recommendationContainer}\n            >\n              {recommendationView}\n            </Grid>\n          </div>\n\n          {/* Movie Similar */}\n          <div className={Classes.movieSimilar}>\n            <p className={Classes.similarTitle}>Similar</p>\n            <Grid container spacing={24} className={Classes.similarContainer}>\n              {similarView}\n            </Grid>\n          </div>\n        </>\n      )\n    }\n\n    return <div className={Classes.detail}>{detailView}</div>\n  }\n}\n\nexport default contextWrapper(Detail)\n","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport accounting from 'accounting'\n\nimport Classes from './app.module.scss'\n\nimport Home from '../pages/Home/home'\nimport Detail from '../pages/Detail/detail'\n\nimport { Provider } from '../contextApi/context'\n\nclass App extends Component {\n  state = {\n    balance: 100000,\n    snackbar: {\n      open: false,\n      message: '',\n      duration: 1500,\n    },\n    moviesOwned: [],\n  }\n\n  updateBalance = newBalance => {\n    this.setState({\n      balance: newBalance,\n    })\n  }\n\n  updateSnackbar = ({ open, message, duration }) => {\n    this.setState({\n      snackbar: { open, message, duration },\n    })\n  }\n\n  updateMoviesOwned = movieIds => {\n    this.setState({\n      moviesOwned: movieIds,\n    })\n  }\n\n  render() {\n    return (\n      <Provider\n        value={{\n          state: this.state,\n          actions: {\n            updateBalance: this.updateBalance,\n            updateSnackbar: this.updateSnackbar,\n            updateMoviesOwned: this.updateMoviesOwned,\n          },\n        }}\n      >\n        <div className={Classes.rootApp}>\n          {/* Snackbar */}\n          <Snackbar\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'center',\n            }}\n            open={this.state.snackbar.open}\n            autoHideDuration={this.state.snackbar.duration}\n            onClose={() =>\n              this.setState({\n                snackbar: {\n                  open: false,\n                  message: '',\n                  duration: 1500,\n                },\n              })\n            }\n            message={this.state.snackbar.message}\n          />\n\n          {/* Navbar */}\n          <AppBar className={Classes.navbar} position=\"fixed\" color=\"default\">\n            <Toolbar>\n              <p className={Classes.navbarTitle}>Tokoflix</p>\n              <p className={Classes.balance}>\n                Rp{' '}\n                <span className={Classes.balanceAmount}>\n                  {accounting.formatMoney(this.state.balance, '', 0, '.')}\n                </span>\n              </p>\n            </Toolbar>\n          </AppBar>\n\n          {/* Pages Routes */}\n          <div className={Classes.rootPages}>\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/:id_and_slug\" component={Detail} />\n            </Switch>\n          </div>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.scss'\nimport App from './layout/app'\nimport * as serviceWorker from './serviceWorker'\n\n// Wrap root component so that we can use router inside it\nconst app = (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}